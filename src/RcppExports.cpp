// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_bound
int c_bound(arma::vec pik);
RcppExport SEXP _StratifiedSampling_c_bound(SEXP pikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    rcpp_result_gen = Rcpp::wrap(c_bound(pik));
    return rcpp_result_gen;
END_RCPP
}
// calibRaking
Rcpp::NumericVector calibRaking(arma::mat Xs, arma::vec d, arma::vec total, arma::vec q, int max_iter, double tol);
RcppExport SEXP _StratifiedSampling_calibRaking(SEXP XsSEXP, SEXP dSEXP, SEXP totalSEXP, SEXP qSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type total(totalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(calibRaking(Xs, d, total, q, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// T
double T(NumericVector w, int i, int j);
RcppExport SEXP _StratifiedSampling_T(SEXP wSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(T(w, i, j));
    return rcpp_result_gen;
END_RCPP
}
// RR
double RR(NumericVector w, int k, int j);
RcppExport SEXP _StratifiedSampling_RR(SEXP wSEXP, SEXP kSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(RR(w, k, j));
    return rcpp_result_gen;
END_RCPP
}
// w_
NumericVector w_(NumericVector pik, int n, int N);
RcppExport SEXP _StratifiedSampling_w_(SEXP pikSEXP, SEXP nSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(w_(pik, n, N));
    return rcpp_result_gen;
END_RCPP
}
// disj
arma::umat disj(arma::uvec strata);
RcppExport SEXP _StratifiedSampling_disj(SEXP strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type strata(strataSEXP);
    rcpp_result_gen = Rcpp::wrap(disj(strata));
    return rcpp_result_gen;
END_RCPP
}
// ncat
arma::rowvec ncat(arma::umat Xcat);
RcppExport SEXP _StratifiedSampling_ncat(SEXP XcatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Xcat(XcatSEXP);
    rcpp_result_gen = Rcpp::wrap(ncat(Xcat));
    return rcpp_result_gen;
END_RCPP
}
// disjMatrix
arma::umat disjMatrix(arma::umat strata);
RcppExport SEXP _StratifiedSampling_disjMatrix(SEXP strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type strata(strataSEXP);
    rcpp_result_gen = Rcpp::wrap(disjMatrix(strata));
    return rcpp_result_gen;
END_RCPP
}
// distUnitk
arma::vec distUnitk(arma::mat& X, int& k, bool tore, double toreBound);
RcppExport SEXP _StratifiedSampling_distUnitk(SEXP XSEXP, SEXP kSEXP, SEXP toreSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(distUnitk(X, k, tore, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// inclprob
arma::vec inclprob(arma::vec& x, const double& n);
RcppExport SEXP _StratifiedSampling_inclprob(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(inclprob(x, n));
    return rcpp_result_gen;
END_RCPP
}
// qfromw
NumericMatrix qfromw(NumericVector& wr, const int& n);
RcppExport SEXP _StratifiedSampling_qfromw(SEXP wrSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type wr(wrSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(qfromw(wr, n));
    return rcpp_result_gen;
END_RCPP
}
// sfromq
IntegerVector sfromq(const NumericMatrix& q);
RcppExport SEXP _StratifiedSampling_sfromq(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(sfromq(q));
    return rcpp_result_gen;
END_RCPP
}
// pikfromq
NumericVector pikfromq(NumericMatrix& qr);
RcppExport SEXP _StratifiedSampling_pikfromq(SEXP qrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type qr(qrSEXP);
    rcpp_result_gen = Rcpp::wrap(pikfromq(qr));
    return rcpp_result_gen;
END_RCPP
}
// piktfrompik
NumericVector piktfrompik(NumericVector& pik);
RcppExport SEXP _StratifiedSampling_piktfrompik(SEXP pikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type pik(pikSEXP);
    rcpp_result_gen = Rcpp::wrap(piktfrompik(pik));
    return rcpp_result_gen;
END_RCPP
}
// maxent
IntegerVector maxent(NumericVector& pikr);
RcppExport SEXP _StratifiedSampling_maxent(SEXP pikrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type pikr(pikrSEXP);
    rcpp_result_gen = Rcpp::wrap(maxent(pikr));
    return rcpp_result_gen;
END_RCPP
}
// pik2frompik
NumericMatrix pik2frompik(NumericVector pikr, NumericVector wr);
RcppExport SEXP _StratifiedSampling_pik2frompik(SEXP pikrSEXP, SEXP wrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pikr(pikrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wr(wrSEXP);
    rcpp_result_gen = Rcpp::wrap(pik2frompik(pikr, wr));
    return rcpp_result_gen;
END_RCPP
}
// maxentpi2
NumericMatrix maxentpi2(NumericVector pikr);
RcppExport SEXP _StratifiedSampling_maxentpi2(SEXP pikrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pikr(pikrSEXP);
    rcpp_result_gen = Rcpp::wrap(maxentpi2(pikr));
    return rcpp_result_gen;
END_RCPP
}
// psi
NumericVector psi(int n, NumericVector& w);
RcppExport SEXP _StratifiedSampling_psi(SEXP nSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(psi(n, w));
    return rcpp_result_gen;
END_RCPP
}
// psipik
NumericVector psipik(int n, NumericVector& pik);
RcppExport SEXP _StratifiedSampling_psipik(SEXP nSEXP, SEXP pikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type pik(pikSEXP);
    rcpp_result_gen = Rcpp::wrap(psipik(n, pik));
    return rcpp_result_gen;
END_RCPP
}
// logit
NumericVector logit(NumericVector x);
RcppExport SEXP _StratifiedSampling_logit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(x));
    return rcpp_result_gen;
END_RCPP
}
// w
NumericVector w(NumericVector& pik, double tol, int max_iter);
RcppExport SEXP _StratifiedSampling_w(SEXP pikSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(w(pik, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// piktilde
NumericVector piktilde(NumericVector& pik, double tol, int max_iter);
RcppExport SEXP _StratifiedSampling_piktilde(SEXP pikSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(piktilde(pik, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// lambda
NumericVector lambda(NumericVector piktilde);
RcppExport SEXP _StratifiedSampling_lambda(SEXP piktildeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type piktilde(piktildeSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda(piktilde));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
Rcpp::IntegerVector sample_int(int n, int N);
RcppExport SEXP _StratifiedSampling_sample_int(SEXP nSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(n, N));
    return rcpp_result_gen;
END_RCPP
}
// osod
IntegerVector osod(NumericVector pikr);
RcppExport SEXP _StratifiedSampling_osod(SEXP pikrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pikr(pikrSEXP);
    rcpp_result_gen = Rcpp::wrap(osod(pikr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StratifiedSampling_c_bound", (DL_FUNC) &_StratifiedSampling_c_bound, 1},
    {"_StratifiedSampling_calibRaking", (DL_FUNC) &_StratifiedSampling_calibRaking, 6},
    {"_StratifiedSampling_T", (DL_FUNC) &_StratifiedSampling_T, 3},
    {"_StratifiedSampling_RR", (DL_FUNC) &_StratifiedSampling_RR, 3},
    {"_StratifiedSampling_w_", (DL_FUNC) &_StratifiedSampling_w_, 3},
    {"_StratifiedSampling_disj", (DL_FUNC) &_StratifiedSampling_disj, 1},
    {"_StratifiedSampling_ncat", (DL_FUNC) &_StratifiedSampling_ncat, 1},
    {"_StratifiedSampling_disjMatrix", (DL_FUNC) &_StratifiedSampling_disjMatrix, 1},
    {"_StratifiedSampling_distUnitk", (DL_FUNC) &_StratifiedSampling_distUnitk, 4},
    {"_StratifiedSampling_inclprob", (DL_FUNC) &_StratifiedSampling_inclprob, 2},
    {"_StratifiedSampling_qfromw", (DL_FUNC) &_StratifiedSampling_qfromw, 2},
    {"_StratifiedSampling_sfromq", (DL_FUNC) &_StratifiedSampling_sfromq, 1},
    {"_StratifiedSampling_pikfromq", (DL_FUNC) &_StratifiedSampling_pikfromq, 1},
    {"_StratifiedSampling_piktfrompik", (DL_FUNC) &_StratifiedSampling_piktfrompik, 1},
    {"_StratifiedSampling_maxent", (DL_FUNC) &_StratifiedSampling_maxent, 1},
    {"_StratifiedSampling_pik2frompik", (DL_FUNC) &_StratifiedSampling_pik2frompik, 2},
    {"_StratifiedSampling_maxentpi2", (DL_FUNC) &_StratifiedSampling_maxentpi2, 1},
    {"_StratifiedSampling_psi", (DL_FUNC) &_StratifiedSampling_psi, 2},
    {"_StratifiedSampling_psipik", (DL_FUNC) &_StratifiedSampling_psipik, 2},
    {"_StratifiedSampling_logit", (DL_FUNC) &_StratifiedSampling_logit, 1},
    {"_StratifiedSampling_w", (DL_FUNC) &_StratifiedSampling_w, 3},
    {"_StratifiedSampling_piktilde", (DL_FUNC) &_StratifiedSampling_piktilde, 3},
    {"_StratifiedSampling_lambda", (DL_FUNC) &_StratifiedSampling_lambda, 1},
    {"_StratifiedSampling_sample_int", (DL_FUNC) &_StratifiedSampling_sample_int, 2},
    {"_StratifiedSampling_osod", (DL_FUNC) &_StratifiedSampling_osod, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_StratifiedSampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
